// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
    email,
    gender,
    age,
    country
) VALUES (
   ?, ?, ?, ?
)
`

type CreateUserParams struct {
	Email   string `json:"email"`
	Gender  string `json:"gender"`
	Age     int64  `json:"age"`
	Country string `json:"country"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Email,
		arg.Gender,
		arg.Age,
		arg.Country,
	)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE email = ?
`

func (q *Queries) DeleteUser(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, email)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT email, gender, age, country, created_at FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Email,
			&i.Gender,
			&i.Age,
			&i.Country,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT email, gender, age, country, created_at FROM users
WHERE email = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Gender,
		&i.Age,
		&i.Country,
		&i.CreatedAt,
	)
	return i, err
}
